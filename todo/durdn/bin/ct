#!/usr/bin/env python
import os
import glob
import sys
import argparse
import subprocess
import logging as log
from os.path import join, normpath, abspath, islink, split
from pprint import pformat, pprint

from itertools import dropwhile, product, takewhile
import operator

def get_options():
    maxres = 10
    debug = ''
    collect_command = 'git ls-files'
    find_collect_command = 'find . -type f'

    parser = argparse.ArgumentParser(description='command-t like shell command')
    parser.add_argument('target', metavar='target', help='the target pattern to search')
    parser.add_argument('-c', '--command', help='command to collect a list of files (default: git ls-files)')
    parser.add_argument('-f', '--find', action='store_true', help='use find collect command (find . -type f)')
    parser.add_argument('-m', '--max', type=int, help='stop at max results')
    parser.add_argument('-d', '--debug', type=str, help='filename expansion to debug')
    parser.add_argument('-v', '--verbose', action='store_true', help='verbose: print out debug information')
    options = parser.parse_args()

    log.basicConfig(level=log.DEBUG) if options.verbose else log.basicConfig(level=log.INFO)
    maxres = options.max if options.max else maxres
    debug = options.debug if options.debug else debug

    if options.find:
        collect_command = find_collect_command
    elif options.command:
        collect_command = options.command 

    return options.target, collect_command, maxres, debug

def call(command):
    return subprocess.Popen(command.split(),stdout=subprocess.PIPE, stderr=open(os.devnull, 'w')).communicate()

def contains_all(candidate, target):
    return len(list(dropwhile(lambda x: candidate.count(x) > 0, target))) == 0

def filter_files(files, target):
    return [x for x in files if contains_all(x.lower(), target)]

def positions_of_char(char, s):
    return [p[0] for p in enumerate(s) if p[1] == char]

def min_diff(a,b):
    diffs = [p[1] - p[0] for p in product(a,b) if p[1] > p[0]]
    return min(diffs) if diffs else 1000

def all_chars_positions_of(target, in_candidate):
    return list(takewhile(lambda x: x != None, [positions_of_char(c, in_candidate) for c in target]))

def calculate_min_diff(char_matrix):
    return reduce(operator.add, [min_diff(a,b) for a,b in zip(char_matrix, char_matrix[1:])])

def calculate_score(target, candidate):
    char_matrix = all_chars_positions_of(target,candidate)
    return calculate_min_diff(char_matrix) if char_matrix else 1000

if __name__ == '__main__':

    target, collect_command, maxres, debug = get_options()

    if debug:
        log.debug('troubleshooting: %s' % debug.lower())
        score = calculate_score(target, debug.lower())
        log.debug('score: %s' % score)
        sys.exit(0)

    collected, exitcode = call(collect_command)
    if not collected:
        log.error('no results returned by %s' % collect_command)
        sys.exit(1)

    files = collected.split('\n')
    found = filter_files(files, target)

    result = []
    for f in found:
        score = calculate_score(target, f.lower())
        if score < 1000:
            result.append((score,f))

    log.debug('\n'.join([str(f) for f in sorted(result)[:maxres]]))
    print '\n'.join([f[1] for f in sorted(result)[:maxres]])
